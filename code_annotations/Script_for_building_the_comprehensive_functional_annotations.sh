
# This script is used for building the comprehensive functional annotation with RNAfold, DeepSEA and easyMF approaches.
# The prepared example file could be directly used for running.

# ------------------------------------------------------------
# Firstly, we used RNAfold to predict RNA secondary structure alterations induced by coding SNPs
# ------------------------------------------------------------
# for coding SNP
# ************************************* #
# install ViennaRNA RNAfold
# http://rpm.pbone.net/info_idpl_54834908_distro_centos6_com_ViennaRNA-1.8.5-13.7.x86_64.rpm.html
# sudo rpm -ivh ViennaRNA-1.8.5-13.7.x86_64.rpm
RNAfold -d2 -noLP < example.vcf.wt1100.fasta.ref.fasta > example_vep_coding_ref.out
RNAfold -d2 -noLP < example.vcf.mut1100.fasta.ref.fasta > example_vep_coding_alt.out
# ------------------------------------------------------------
# In DeepAnnotation, we run the RNAfold with the following script:
sh 2_SNP_RNAfold.sh
# ------------------------------------------------------------

# ------------------------------------------------------------
# Secondly, we used DeepSEA to predict chromatin accessibility changes resulting from non-coding cis-regulatory SNPs
# ------------------------------------------------------------
# for noncoding SNP
# ************************************* #
# configure DeepSEA environment
# The source file of DeepSEA model could be downloaded from https://deepsea.princeton.edu/help/
# https://deepsea.princeton.edu/media/code/deepsea_train.v0.9.tar.gz
# download the deepsea_train.v0.9.tar.gz and then unzip this file
# https://deepsea.princeton.edu/media/code/deepsea.v0.94b.tar.gz
# download the deepsea.v0.94b.tar.gz and then unzip this file

# for training the DeepSEA model
# please prepare the train.mat and valid.mat, which could be generated by DeepSEA-v0.94b/1_fasta2input.py
# please reset the noutputs to your number of features
th deepsea_train/main.lua -save train_results -LearningRate 1 -LearningRateDecay 8e-7 -weightDecay 1e-6  -momentum 0.9 -stdv 0.05 -setDevice 1  -windowsize 1000  -max_kernel_norm 0.9  -batchSize 16 -L1Sparsity 1e-8 -batchSize 16
# for predicting the VCF file
# please reset the noutputs to your number of features
luajit DeepSEA-v0.94b/2_DeepSEA.lua -test_file_h5 example.vcf.wt1100.fasta.ref.h5  -threads 10 -type 'cuda' -netPath './train_results/model,L1Sparsity=1e-08/bestmodel.net'
luajit DeepSEA-v0.94b/2_DeepSEA.lua -test_file_h5 example.vcf.mut1100.fasta.ref.h5 -threads 10 -type 'cuda' -netPath './train_results/model,L1Sparsity=1e-08/bestmodel.net'
# conver the h5 file to output file
python DeepSEA-v0.94b/3_h5ToOutput.py example.vcf.wt1100.fasta.ref.h5.pred.h5
python DeepSEA-v0.94b/3_h5ToOutput.py example.vcf.mut1100.fasta.ref.h5.pred.h5
# ------------------------------------------------------------
# In DeepAnnotation, we run the DeepSEA with the following script:
sh 2_SNP_epi.sh
# ------------------------------------------------------------

# Lastly, we used easyMF to complement the functional annotations of all genes
# The workflow of easyMF could be accessed via: https://github.com/cma2015/easyMF
# Through the detailed usermannual, one can easily perform the easyMF for complementing gene functions
# ------------------------------------------------------------
# In DeepAnnotation, we run the DeepSEA with the following script:
sh 2_easyMF.sh
# ------------------------------------------------------------

